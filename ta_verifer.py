import pandas as pd
import pandas_ta as pdta
import ta
import numpy as np
import yfinance as yf
import matplotlib.pyplot as plt
import io
import ema_indicator_lib as ema_lib

# plt.style.use('fivethirtyeight')
# plt.rcParams['figure.figsize'] = (20,10)

def calculate_talib_alphatrend(df):
    """
    Parameters to Adjust
        Multiplier (coeff):

        Increasing the coeff parameter will make the AlphaTrend less sensitive, 
        smoothing out the signals and potentially reducing false signals.
        Decreasing the coeff parameter will make the AlphaTrend more sensitive, 
        generating more signals but potentially increasing the number of false signals.
        
        Average Period (AP):

        Increasing the AP period will make the indicator less sensitive by using a 
        longer period for calculating the ATR and momentum indicators, which smooths 
        out short-term fluctuations.
        Decreasing the AP period will make the indicator more sensitive to short-term 
        price movements, generating more signals.
        
        Using Volume Data (novolumedata):

        Enabling or disabling the use of volume data can affect the sensitivity and 
        reliability of the signals. Using volume data can provide additional confirmation for trends.
        Techniques to Improve Reliability
        
        Combining Multiple Indicators:

        Use additional technical indicators to confirm the signals generated by 
        the AlphaTrend algorithm. For example, combine it with moving averages, 
        MACD, or Bollinger Bands to filter out false signals.
        
        Signal Confirmation:

        Require multiple periods of confirmation before considering a signal valid. 
        For instance, wait for the AlphaTrend to remain above or below its previous 
        value for several periods before triggering a buy or sell signal.
        
        Threshold Adjustments:

        Adjust the thresholds for the momentum indicators (e.g., RSI, MFI). For example, 
        instead of using 50 as the threshold, you can use 55 for a buy signal 
        and 45 for a sell signal to reduce the noise.
    """
    # Parameters
    coeff = 3.0  # Adjusted for higher sensitivity
    AP = 14  # Adjusted for higher sensitivity
    adj_rsii = 55
    
    src = df['Close']
    novolumedata = False
    confirmation_period = 2  # Require the signal to hold for 2 periods

    # Calculate ATR
    atr_indicator = ta.volatility.AverageTrueRange(high=df['High'], low=df['Low'], close=df['Close'], window=AP)
    df['ATR'] = atr_indicator.average_true_range()

    # Calculate upT and downT
    df['upT'] = df['Low'] - df['ATR'] * coeff
    df['downT'] = df['High'] + df['ATR'] * coeff

    # Initialize AlphaTrend column
    df['AlphaTrend'] = np.nan

    # Initialize the first value of AlphaTrend
    if novolumedata:
        initial_condition = ta.momentum.RSIIndicator(close=df['Close'], window=AP).rsi().iloc[0] >= 50
    else:
        hlc3 = (df['High'] + df['Low'] + df['Close']) / 3
        initial_condition = ta.volume.MFIIndicator(high=df['High'], low=df['Low'], close=df['Close'], volume=df['Volume'], window=AP).money_flow_index().iloc[0] >= 50

    if initial_condition:
        df.loc[df.index[0], 'AlphaTrend'] = df.loc[df.index[0], 'upT']
    else:
        df.loc[df.index[0], 'AlphaTrend'] = df.loc[df.index[0], 'downT']

    # Calculate AlphaTrend
    for i in range(1, len(df)):
        if novolumedata:
            condition = ta.momentum.RSIIndicator(close=df['Close'], window=AP).rsi().iloc[i] >= adj_rsii  # Adjusted threshold
        else:
            hlc3 = (df['High'] + df['Low'] + df['Close']) / 3
            condition = ta.volume.MFIIndicator(high=df['High'], low=df['Low'], close=df['Close'], volume=df['Volume'], window=AP).money_flow_index().iloc[i] >= 55  # Adjusted threshold
        
        if condition:
            df.loc[df.index[i], 'AlphaTrend'] = df.loc[df.index[i], 'upT'] if df.loc[df.index[i], 'upT'] < df.loc[df.index[i-1], 'AlphaTrend'] else df.loc[df.index[i-1], 'AlphaTrend']
        else:
            df.loc[df.index[i], 'AlphaTrend'] = df.loc[df.index[i], 'downT'] if df.loc[df.index[i], 'downT'] > df.loc[df.index[i-1], 'AlphaTrend'] else df.loc[df.index[i-1], 'AlphaTrend']

    # Buy and Sell signals with confirmation
    df['buySignalk'] = (df['AlphaTrend'] > df['AlphaTrend'].shift(2)) & (df['AlphaTrend'].shift(1) <= df['AlphaTrend'].shift(3))
    df['buySignalk'] = df['buySignalk'].rolling(window=confirmation_period).sum() == confirmation_period  # Confirm signal over multiple periods

    df['sellSignalk'] = (df['AlphaTrend'] < df['AlphaTrend'].shift(2)) & (df['AlphaTrend'].shift(1) >= df['AlphaTrend'].shift(3))
    df['sellSignalk'] = df['sellSignalk'].rolling(window=confirmation_period).sum() == confirmation_period  # Confirm signal over multiple periods

    # Plotting
    """    
    plt.figure(figsize=(12, 6))
    plt.plot(df.index, df['Close'], label='Close Price', color='black')
    plt.plot(df.index, df['AlphaTrend'], label='AlphaTrend', color='blue', linewidth=2)

    # Determine the color for fill
    color1 = np.where(df['AlphaTrend'] > df['AlphaTrend'].shift(2), 'green', 'red')

    for i in range(1, len(df)):
        idx=df.index[i]
        if color1[i] == 'green':
            plt.plot(df.index[i-1:i+1], df['AlphaTrend'].iloc[i-1:i+1], color='green', linewidth=2)
            plt.scatter(idx, df.loc[idx, 'Close'], marker='^', color='green', s=100)
        else:
            plt.plot(df.index[i-1:i+1], df['AlphaTrend'].iloc[i-1:i+1], color='red', linewidth=2)
            plt.scatter(idx, df.loc[idx, 'Close'], marker='v', color='red', s=100)

    # Adding the legend
    # To avoid duplicate legend entries, we plot a single invisible point with each label
    plt.scatter([], [], color='green', label='Buy')
    plt.scatter([], [], color='red', label='Sell')
    plt.legend()

    # Labels and title
    plt.xlabel('Date')
    plt.ylabel('Close Price')
    plt.title('AlphaTrend with Buy and Sell Signals')

    # Display the plot
    plt.show()
    """
    # Buy and Sell signals
    df['buySignalk'] = (df['AlphaTrend'] > df['AlphaTrend'].shift(2)) & (df['AlphaTrend'].shift(1) <= df['AlphaTrend'].shift(3))
    df['sellSignalk'] = (df['AlphaTrend'] < df['AlphaTrend'].shift(2)) & (df['AlphaTrend'].shift(1) >= df['AlphaTrend'].shift(3))

    # Bar since last buy/sell signal
    df['K1'] = df['buySignalk'].cumsum()
    df['K2'] = df['sellSignalk'].cumsum()
    df['O1'] = df['buySignalk'].shift(1).cumsum()
    df['O2'] = df['sellSignalk'].shift(1).cumsum()

    print(df[['AlphaTrend', 'buySignalk', 'sellSignalk', 'K1', 'K2', 'O1', 'O2']])
    print("Buy Signals:\n",df[df['buySignalk']==True])
    print("Sell Signals:\n",df[df['sellSignalk']==True])
    
    # Initialize the signal column
    df['Buy_Sell_Signal'] = np.nan
    curr_signal = 0

    # Signal switcher
    for idx, row in df.iterrows():
        if row['sellSignalk'] == True:
            curr_signal = 0
        elif row['buySignalk'] == True:
            curr_signal = 1
        
        df.loc[idx, 'Buy_Sell_Signal'] = curr_signal
        print(f"{idx} : {df.loc[idx, 'Buy_Sell_Signal']}")
    
    
    return df


####################### Using Pandas TA library ##########################
def calculate_pdta_alphatrend(stock,df,Fast_EMA,Slow_EMA, Lookback):
    
    # Calculate the Alpha Trend (AMAT) indicator
    try:
        alpha_trend = pdta.amat(df['Close'], fast=Fast_EMA, slow=Slow_EMA,lookback=Lookback)
    except BaseException as error:
        print(f"****ERROR: Fatal error {error} encountered while call ta.amat() function. Exiting!")
        quit()
        
        
    # print(alpha_trend)

    # Add the Alpha Trend indicator to the DataFrame
    df = pd.concat([df, alpha_trend], axis=1)

    # print("df size = ",len(df),df.head(10))
    df['Buy_Sell_Signal'] = 0
    
    try:
        # Create a custorm indicator var column name for the Fast/Slow EMA
        AMATe_LR_indicator = f"AMATe_LR_{Fast_EMA}_{Slow_EMA}_{Lookback}"
        AMATe_SR_indicator = f"AMATe_SR_{Fast_EMA}_{Slow_EMA}_{Lookback}"

        df['Buy_Sell_Signal'] = df[AMATe_LR_indicator]
    except Exception as error:
        print(error)
        print(f"****ERROR: Fatal error {error} encountered while call ta.amat() function. Exiting!")
        # print(error.__doc__)
        quit()
        
    consecutive_buy_days = 0
    
    last_date = df.index[-1]
    if df.loc[last_date,'Buy_Sell_Signal'] == 1:
        current_recommendation = 'Buy'
        # Find the number of days in 'Buy' recommendations
        for date in reversed(df.index):
            if df.loc[date, 'Buy_Sell_Signal'] == 1:
                consecutive_buy_days += 1
            else:
                break
    else:
        current_recommendation = 'Sell'
        consecutive_buy_days = -1
        
    return last_date, current_recommendation, df, consecutive_buy_days
    
def get_momentum_indicators(df):

    data = df.copy()

    # Ensure the data is sorted by date
    data = data.sort_values(by='Date')

    # Calculate MACD
    macd = data.ta.macd(close='Close', fast=12, slow=26, signal=9, append=True)

    # Calculate RSI
    data['RSI'] = pdta.rsi(data['Close'], length=14)

    # Calculate Bollinger Bands
    bbands = data.ta.bbands(close='Close', length=20, std=2, append=True)

    # Define Buy/Sell Conditions

    # Buy Signal:
    # - MACD line crosses above the signal line
    # - RSI exits oversold territory (rises above 30)
    # - Closing price crosses above the lower Bollinger Band

    data['Buy_Signal'] = (
        (data['MACD_12_26_9'] > data['MACDs_12_26_9']) & # MACD crossover
        (data['RSI'] > 30) & # RSI exits oversold
        (data['Close'] > data['BBL_20_2.0']) # Close above lower Bollinger Band
    )

    # Sell Signal:
    # - MACD line crosses below the signal line
    # - RSI exits overbought territory (falls below 70)
    # - Closing price crosses below the upper Bollinger Band

    data['Sell_Signal'] = (
        (data['MACD_12_26_9'] < data['MACDs_12_26_9']) & # MACD crossover
        (data['RSI'] < 70) & # RSI exits overbought
        (data['Close'] < data['BBU_20_2.0']) # Close below upper Bollinger Band
    )

    # Combine Buy and Sell signals into a single column
    data['Mom_Signal'] = 0  # Default no signal
    data.loc[data['Buy_Signal'], 'Mom_Signal'] = 1  # Buy signal
    data.loc[data['Sell_Signal'], 'Mom_Signal'] = 0  # Sell signal

    # Display the resulting DataFrame with signals
    # return data[['Close', 'MACD_12_26_9', 'MACDs_12_26_9', 'RSI', 'BBL_20_2.0', 'BBU_20_2.0', 'signal']]
    return data



def plot_ta_alphatrend(df,stock,image_only = False,fast_ema=20,slow_ema=40):
    # in : df should contain 'Close' price column and a 'Buy_Sell_Signal' column and indexed by Date
    # print("IN plot_ta_alphatrend(df,stock,image_only = False,fast_ema=20,slow_ema=40)")
    # Plotting the stock price and AMAT indicator
    plt.figure(figsize=(12,6))
    plt.grid(True, which='both', linestyle='--', linewidth=0.5, color='gray')

    # Add labels for x and y axes
    plt.xlabel('Date')  # Label for x-axis
    plt.ylabel('Close Price')  # Label for y-axis
    
    idx= df.index[-1]
    plt.plot(df['Close'],label='Close', color='blue', linestyle='-', linewidth=1.5)
    
    plt.plot(df[f'{fast_ema}_day_EMA'],label=f'{fast_ema}_day_EMA', color='c', linestyle='--', linewidth=1.5)
    plt.plot(df[f'{slow_ema}_day_EMA'],label=f'{slow_ema}_day_EMA', color='m', linestyle='--', linewidth=1.5)
    
    plt.text(idx, df.loc[idx, 'Close'], 
            f'${df.loc[idx, "Close"]:.2f}\n{idx.strftime("%Y-%m-%d")}', 
            color='blue', fontsize=11, ha='left', va='bottom')
    
    ##### PLOT BUY as Green and SELL as Red ######
    # Initialize variables to track segments
    prev_signal = df['Confirmation'].iloc[0]
    segment_start = 0
    
    # Iterate through the DataFrame to plot segments
    for i in range(1, len(df)):
        current_signal = df['Confirmation'].iloc[i]
   
        # Check if the signal changes
        if current_signal != prev_signal:
            # Plot the segment
            plt.plot(df.index[segment_start:i+1], df['Close'].iloc[segment_start:i+1],
                    color='green' if prev_signal == 1 else 'red')
            
            # Plot vertical lines for change in signals
            date_to_mark = pd.Timestamp(df.index[segment_start])
            plt.axvline(x=date_to_mark, color='green' if prev_signal == 1 else 'red', linestyle='--',linewidth=1.3, label=df.index[segment_start].strftime('%Y-%m-%d'))
            
            # Update segment start
            segment_start = i
        
        # Update previous signal
        prev_signal = current_signal

    # Plot the last segment
    plt.plot(df.index[segment_start:], df['Close'].iloc[segment_start:], 
            color='green' if df['Confirmation'].iloc[segment_start] == 1 else 'red')
    
    # Plot vertical lines for change in signals
    date_to_mark = pd.Timestamp(df.index[segment_start])
    plt.axvline(x=date_to_mark, color='green' if df['Confirmation'].iloc[segment_start] == 1 else 'red', linestyle='--', linewidth=1.3, label=df.index[segment_start].strftime('%Y-%m-%d'))

    # Adding the legend
    # To avoid duplicate legend entries, we plot a single invisible point with each label
    plt.scatter([], [], color='green', label='Buy')
    plt.scatter([], [], color='red', label='Sell')
    ###########################################################

    prev_sig = None
    confirmed = False
    for idx, row in df.iterrows():
        # print(buy_signals.loc[idx])
        if df.loc[idx,'Confirmation'] == 1:
            if prev_sig != 1:
                plt.scatter(idx, df.loc[idx, 'Close'], marker='^', color='green', s=100)            
                plt.text(idx, df.loc[idx, 'Close'], 
                    f'${df.loc[idx, "Open"]:.2f}\n{idx.strftime("%Y-%m-%d")}', 
                    color='green', fontsize=10, ha='left', va='bottom')
                prev_sig = 1
                
        elif df.loc[idx,'Confirmation']  == 0 and prev_sig != 0:
            plt.scatter(idx, df.loc[idx, 'Close'], marker='v', color='red', s=100)
            plt.text(idx, df.loc[idx, 'Close'], 
                    f'${df.loc[idx, "Open"]:.2f}\n{idx.strftime("%Y-%m-%d")}', 
                    color='red', fontsize=10, ha='left', va='top')
            prev_sig = 0
            
    # Create and Customize a legend
    handles, labels = plt.gca().get_legend_handles_labels()
    legend = plt.legend(handles=handles, labels=labels, title=f'EMA Trend {stock}:', loc='upper left', bbox_to_anchor=(1, 1))

    plt.title(f'{stock} Confirmed Signals',fontsize = 14, fontweight ='bold')

    # Customize axes (optional)
    plt.xticks(rotation=45)  # Rotate x-axis tick labels for better readability (optional)

    # Major and minor ticks (optional)
    # plt.locator_params(axis='x', nbins=7)  # Adjust the number of major x-axis ticks
    # plt.locator_params(axis='y', nbins=5)  # Adjust the number of major y-axis ticks
    plt.minorticks_on()  # Enable minor ticks on both axes

    plt.tight_layout()  # Adjust spacing to prevent overlapping elements (optional)


    # Adding labels and legend
    # plt.xlabel('Date')
    # plt.ylabel('Price')
    # plt.legend()
    
    if image_only:
        print("in plot_ta_alphatrend() returning image to webpage")
        # Save the plot to a BytesIO object
        img = io.BytesIO()
        plt.savefig(img, format='png')
        img.seek(0)
        plt.close()
        print("EMA Plot Image Generated",flush=True)
        return img    
    else:
        plt.show()    
    
def generate_pdta_plot_image(stock,start_date,fast,slow,lookback):
    
    # Create a DataFrame with sample data
    print(start_date)
    df1 = yf.Ticker(stock).history(start=start_date,end=None,interval='1d')
    # print(df1)
    # print(f"len(df1 )= {len(df1)}")
    if (len(df1) == 0): print("************** NO DATA ******") 
    # else: print("START DATE =", start_date, " --- \ndf = ",df1)
    
    # Calculate Pandas alpha trend using pandas_ta lib
    last_date,recommendation, df_trend_pdta, ema_days_at_buy = calculate_pdta_alphatrend(stock=stock,df=df1,Fast_EMA=fast,Slow_EMA=slow,Lookback=lookback)
    
    df_trend_pdta = ema_lib.generate_signals(df_trend_pdta,fast_ema=fast,slow_ema=slow)
    
    # print(f"{stock} Alpha Trend Indicator:",df_trend_pdta.loc[df_trend_pdta.index,'Buy_Sell_Signal'].tail(20))
    # print(f"{stock} Alpha Trend Indicator:",df_trend_pdta.tail(20))

    # img = plot_ta_alphatrend(df_trend_pdta,stock,image_only=True)

    df_trend_pdta = get_momentum_indicators(df_trend_pdta)
    
    df_trend_pdta['Confirmation'] = 0
    
    for idx, row in df_trend_pdta.iterrows():
        if df_trend_pdta.loc[idx,'Buy_Sell_Signal'] == 1 & df_trend_pdta.loc[idx,'Mom_Signal'] == 1:
            df_trend_pdta.loc[idx,'Confirmation'] = 1
            
    img = plot_ta_alphatrend(df_trend_pdta,stock,image_only=True)
    
    # print(f"{stock} Momentum Indicators:",df_trend_pdta.loc[df_trend_pdta.index,'Mom_Signal'].tail(20))
    # print(f"{stock} Momentum Indicators:",df_trend_pdta[['Buy_Sell_Signal','Mom_Signal','Confirmation']].tail(20))
    
    return img
    
def main():
    stock = input("Enter Stock Symbol :").strip().upper()
    start_date =   input("  Start Date (YYYY-MM-DD);")
    Fast_EMA = int(input("  Fast EMA (Short interval):"))
    Slow_EMA = int(input("  Slow EMA (Long interval):"))
    Lookback = int(input("  Lookback Period :"))

    # Create a DataFrame with sample data
    df = yf.Ticker(stock).history(start=start_date,period='max',interval='1d')
    
    # Calculate Pandas alpha trend using pandas_ta lib
    last_date,recommendation, df_trend_pdta, ema_days_at_buy = calculate_pdta_alphatrend(stock=stock,df=df,Fast_EMA=Fast_EMA,Slow_EMA=Slow_EMA,Lookback=Lookback)
    print(df_trend_pdta['Buy_Sell_Signal'])
    print(df_trend_pdta)
    df_trend_pdta = ema_lib.generate_signals(df_trend_pdta,fast_ema=Fast_EMA,slow_ema=Slow_EMA)
    
    # print(f"{stock} Alpha Trend Indicator:",df_trend_pdta.loc[df_trend_pdta.index,'Buy_Sell_Signal'].tail(20))
    # print(f"{stock} Alpha Trend Indicator:",df_trend_pdta.tail(20))

    # img = plot_ta_alphatrend(df_trend_pdta,stock,image_only=True)

    df_trend_pdta = get_momentum_indicators(df_trend_pdta)
    
    df_trend_pdta['Confirmation'] = 0
    
    for idx, row in df_trend_pdta.iterrows():
        if df_trend_pdta.loc[idx,'Buy_Sell_Signal'] == 1 & df_trend_pdta.loc[idx,'Mom_Signal'] == 1:
            df_trend_pdta.loc[idx,'Confirmation'] = 1
            
    
    # print(f"Last Date : {last_date}\nLast recommendation : {recommendation.strip().upper()}")
    # Plot alpha_trend
    plot_ta_alphatrend(df_trend_pdta,stock)
    # print(df_trend_pdta['Buy_Sell_Signal'].tail(10))
    
    # df_trend_talib = calculate_talib_alphatrend(df=df)
    # plot_ta_alphatrend(df_trend_talib,stock)
    
# ################# Main ###########################################
if __name__== "__main__":
    main()